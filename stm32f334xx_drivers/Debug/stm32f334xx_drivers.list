
stm32f334xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000784  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800097c  08000984  00010984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800097c  0800097c  00010984  2**0
                  CONTENTS
  4 .ARM          00000000  0800097c  0800097c  00010984  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800097c  08000984  00010984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800097c  0800097c  0001097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000980  08000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010984  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010984  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000109b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009a5  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000029e  00000000  00000000  0001139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00011640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008b  00000000  00000000  00011708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001481  00000000  00000000  00011793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e5b  00000000  00000000  00012c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000579a  00000000  00000000  00013a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000026c  00000000  00000000  0001920c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00019478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000964 	.word	0x08000964

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000964 	.word	0x08000964

08000238 <delay>:
#include "stm32f334xx.h"

void delay(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 500000/2; i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <delay+0x12>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <delay+0x28>)
 800024e:	4293      	cmp	r3, r2
 8000250:	ddf8      	ble.n	8000244 <delay+0xc>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	0003d08f 	.word	0x0003d08f

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOLed, GPIOBtn;                                    // Variables for GPIO_Handle_t

	GPIOBtn.pGPIOx                              = GPIOA;               // Choose GPIO port as GPIOA
 800026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026e:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber       = GPIO_PIN_NO_0;       // Pin number 0
 8000270:	2300      	movs	r3, #0
 8000272:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_IT_FT;     // Pin mode is arranged as INTERRUPT FALLING EDGE DETECTION 
 8000274:	2304      	movs	r3, #4
 8000276:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_MS;       // Output speed is configured as medium speed
 8000278:	2301      	movs	r3, #1
 800027a:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;        // No pull-up or pull-down resistors
 800027c:	2300      	movs	r3, #0
 800027e:	71fb      	strb	r3, [r7, #7]

	GPIOLed.pGPIOx                              = GPIOB;               // Choose GPIO port as GPIOB
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <main+0x74>)
 8000282:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber       = GPIO_PIN_NO_6;       // Pin number 6
 8000284:	2306      	movs	r3, #6
 8000286:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_OUT;       // Pin mode is arranged as output
 8000288:	2301      	movs	r3, #1
 800028a:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_MS;       // Output speed is configured as medium speed
 800028c:	2301      	movs	r3, #1
 800028e:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType       = GPIO_OP_TYPE_PP;     // Output type is configured as push-pull
 8000290:	2300      	movs	r3, #0
 8000292:	753b      	strb	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;        // No pull-up or pull-down resistors
 8000294:	2300      	movs	r3, #0
 8000296:	74fb      	strb	r3, [r7, #19]

    GPIO_PeriClockControl(GPIOA, ENABLE);                              // Activate the GPIOA peripheral clock
 8000298:	2101      	movs	r1, #1
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 f857 	bl	8000350 <GPIO_PeriClockControl>
    GPIO_PeriClockControl(GPIOB, ENABLE);                              // Activate the GPIOB peripheral clock
 80002a2:	2101      	movs	r1, #1
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <main+0x74>)
 80002a6:	f000 f853 	bl	8000350 <GPIO_PeriClockControl>

    GPIO_Init(&GPIOBtn);                                               // Initialize the GPIOA pin 0
 80002aa:	463b      	mov	r3, r7
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f8d5 	bl	800045c <GPIO_Init>
    GPIO_Init(&GPIOLed);                                               // Initialize the GPIOB pin 6
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8d0 	bl	800045c <GPIO_Init>

    // IRQ Configurations 
    GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRIO15);
 80002bc:	210f      	movs	r1, #15
 80002be:	2006      	movs	r0, #6
 80002c0:	f000 fade 	bl	8000880 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	2006      	movs	r0, #6
 80002c8:	f000 fa54 	bl	8000774 <GPIO_IRQInterruptConfig>
    
	return 0;
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3718      	adds	r7, #24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000400 	.word	0x48000400

080002dc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    // Handle the interrupt
    GPIO_IRQHandling(GPIO_PIN_NO_0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 fafb 	bl	80008dc <GPIO_IRQHandling>
    GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_6);                // Toggle the LED
 80002e6:	2106      	movs	r1, #6
 80002e8:	4803      	ldr	r0, [pc, #12]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002ea:	f000 fa2d 	bl	8000748 <GPIO_ToggleOutputPin>
    delay();                                                   // Put some delay because of button bouncing    
 80002ee:	f7ff ffa3 	bl	8000238 <delay>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	48000400 	.word	0x48000400

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 faf7 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff99 	bl	8000264 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	08000984 	.word	0x08000984
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC1_2_IRQHandler>
	...

08000350 <GPIO_PeriClockControl>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d136      	bne.n	80003d0 <GPIO_PeriClockControl+0x80>
    {
        if (pGPIOx == GPIOA)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 800036a:	4b37      	ldr	r3, [pc, #220]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a36      	ldr	r2, [pc, #216]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000374:	6153      	str	r3, [r2, #20]
        }else if (pGPIOx == GPIOF)
        {
            GPIOF_PCLK_DI();
        }
    }
}
 8000376:	e061      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOB)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a34      	ldr	r2, [pc, #208]	; (800044c <GPIO_PeriClockControl+0xfc>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000380:	4b31      	ldr	r3, [pc, #196]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a30      	ldr	r2, [pc, #192]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800038a:	6153      	str	r3, [r2, #20]
}
 800038c:	e056      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOC)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a2f      	ldr	r2, [pc, #188]	; (8000450 <GPIO_PeriClockControl+0x100>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000396:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a2b      	ldr	r2, [pc, #172]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 800039c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a0:	6153      	str	r3, [r2, #20]
}
 80003a2:	e04b      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOD)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <GPIO_PeriClockControl+0x104>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a25      	ldr	r2, [pc, #148]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b6:	6153      	str	r3, [r2, #20]
}
 80003b8:	e040      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOF)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <GPIO_PeriClockControl+0x108>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d13c      	bne.n	800043c <GPIO_PeriClockControl+0xec>
            GPIOF_PCLK_EN();
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a20      	ldr	r2, [pc, #128]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003cc:	6153      	str	r3, [r2, #20]
}
 80003ce:	e035      	b.n	800043c <GPIO_PeriClockControl+0xec>
        if (pGPIOx == GPIOA)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x96>
            GPIOA_PCLK_DI();
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003e2:	6153      	str	r3, [r2, #20]
}
 80003e4:	e02a      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOB)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <GPIO_PeriClockControl+0xfc>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0xac>
            GPIOB_PCLK_DI();
 80003ee:	4b16      	ldr	r3, [pc, #88]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 80003f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003f8:	6153      	str	r3, [r2, #20]
}
 80003fa:	e01f      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOC)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <GPIO_PeriClockControl+0x100>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0xc2>
            GPIOC_PCLK_DI();
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 800040a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800040e:	6153      	str	r3, [r2, #20]
}
 8000410:	e014      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOD)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <GPIO_PeriClockControl+0x104>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0xd8>
            GPIOD_PCLK_DI();
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000420:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000424:	6153      	str	r3, [r2, #20]
}
 8000426:	e009      	b.n	800043c <GPIO_PeriClockControl+0xec>
        }else if (pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <GPIO_PeriClockControl+0x108>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d105      	bne.n	800043c <GPIO_PeriClockControl+0xec>
            GPIOF_PCLK_DI();
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <GPIO_PeriClockControl+0xf8>)
 8000436:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800043a:	6153      	str	r3, [r2, #20]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	48000400 	.word	0x48000400
 8000450:	48000800 	.word	0x48000800
 8000454:	48000c00 	.word	0x48000c00
 8000458:	48001400 	.word	0x48001400

0800045c <GPIO_Init>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800045c:	b480      	push	{r7}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;                  //temp variable
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of the GPIO pin
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d81f      	bhi.n	80004b0 <GPIO_Init+0x54>
    {
        temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	4619      	mov	r1, r3
 800048e:	2303      	movs	r3, #3
 8000490:	408b      	lsls	r3, r1
 8000492:	43db      	mvns	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	e09a      	b.n	80005e6 <GPIO_Init+0x18a>

    }else
    {
        if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d117      	bne.n	80004e8 <GPIO_Init+0x8c>
        {
            // 1. Configure the FTSR1
            EXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004b8:	4b9c      	ldr	r3, [pc, #624]	; (800072c <GPIO_Init+0x2d0>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a98      	ldr	r2, [pc, #608]	; (800072c <GPIO_Init+0x2d0>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
            // Clear the corresponding RTSR1 bit
            EXTI->EXTI_RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004ce:	4b97      	ldr	r3, [pc, #604]	; (800072c <GPIO_Init+0x2d0>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	4611      	mov	r1, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	408a      	lsls	r2, r1
 80004dc:	43d2      	mvns	r2, r2
 80004de:	4611      	mov	r1, r2
 80004e0:	4a92      	ldr	r2, [pc, #584]	; (800072c <GPIO_Init+0x2d0>)
 80004e2:	400b      	ands	r3, r1
 80004e4:	6093      	str	r3, [r2, #8]
 80004e6:	e035      	b.n	8000554 <GPIO_Init+0xf8>

        }else if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	2b05      	cmp	r3, #5
 80004ee:	d117      	bne.n	8000520 <GPIO_Init+0xc4>
        {
            // 1. Configure the RTSR1
            EXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004f0:	4b8e      	ldr	r3, [pc, #568]	; (800072c <GPIO_Init+0x2d0>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	4a8a      	ldr	r2, [pc, #552]	; (800072c <GPIO_Init+0x2d0>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6093      	str	r3, [r2, #8]
            // Clear the corresponding FTSR1 bit
            EXTI->EXTI_FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000506:	4b89      	ldr	r3, [pc, #548]	; (800072c <GPIO_Init+0x2d0>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	43d2      	mvns	r2, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a84      	ldr	r2, [pc, #528]	; (800072c <GPIO_Init+0x2d0>)
 800051a:	400b      	ands	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
 800051e:	e019      	b.n	8000554 <GPIO_Init+0xf8>

        }else if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b06      	cmp	r3, #6
 8000526:	d115      	bne.n	8000554 <GPIO_Init+0xf8>
        {
            // 1. Configure both FTSR and RTSR
            EXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000528:	4b80      	ldr	r3, [pc, #512]	; (800072c <GPIO_Init+0x2d0>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	4611      	mov	r1, r2
 8000538:	4a7c      	ldr	r2, [pc, #496]	; (800072c <GPIO_Init+0x2d0>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6093      	str	r3, [r2, #8]
            EXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800053e:	4b7b      	ldr	r3, [pc, #492]	; (800072c <GPIO_Init+0x2d0>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	4611      	mov	r1, r2
 800054e:	4a77      	ldr	r2, [pc, #476]	; (800072c <GPIO_Init+0x2d0>)
 8000550:	430b      	orrs	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]
            
        }
        // 2. Configure the GPIO port selection in SYSCONFIG_EXTICR
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;                          // temp1 is used to decide which register(SYSCFG_EXTICRx) is going to be used.
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;                          // temp2 is used to decide which bit is start point in the register which is decided by temp1
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	f003 0303 	and.w	r3, r3, #3
 8000564:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIOA_BASEADDR_TO_CODE( pGPIOHandle->pGPIOx );                        // portcode decides which port is used
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800056e:	d01d      	beq.n	80005ac <GPIO_Init+0x150>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a6e      	ldr	r2, [pc, #440]	; (8000730 <GPIO_Init+0x2d4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d016      	beq.n	80005a8 <GPIO_Init+0x14c>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a6d      	ldr	r2, [pc, #436]	; (8000734 <GPIO_Init+0x2d8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d00f      	beq.n	80005a4 <GPIO_Init+0x148>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a6b      	ldr	r2, [pc, #428]	; (8000738 <GPIO_Init+0x2dc>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d008      	beq.n	80005a0 <GPIO_Init+0x144>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a6a      	ldr	r2, [pc, #424]	; (800073c <GPIO_Init+0x2e0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d101      	bne.n	800059c <GPIO_Init+0x140>
 8000598:	2305      	movs	r3, #5
 800059a:	e008      	b.n	80005ae <GPIO_Init+0x152>
 800059c:	2300      	movs	r3, #0
 800059e:	e006      	b.n	80005ae <GPIO_Init+0x152>
 80005a0:	2303      	movs	r3, #3
 80005a2:	e004      	b.n	80005ae <GPIO_Init+0x152>
 80005a4:	2302      	movs	r3, #2
 80005a6:	e002      	b.n	80005ae <GPIO_Init+0x152>
 80005a8:	2301      	movs	r3, #1
 80005aa:	e000      	b.n	80005ae <GPIO_Init+0x152>
 80005ac:	2300      	movs	r3, #0
 80005ae:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();                                                                        // SYSCFG peripheral clock is enabled
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <GPIO_Init+0x2e4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a62      	ldr	r2, [pc, #392]	; (8000740 <GPIO_Init+0x2e4>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6193      	str	r3, [r2, #24]
        SYSCFG->SYSCFG_EXTICR[temp1] = portcode << ( temp2 * 4 );                                // This line enables the interrupt for given pin number and peripheral 
 80005bc:	7c7a      	ldrb	r2, [r7, #17]
 80005be:	7cbb      	ldrb	r3, [r7, #18]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	fa02 f103 	lsl.w	r1, r2, r3
 80005c6:	4a5f      	ldr	r2, [pc, #380]	; (8000744 <GPIO_Init+0x2e8>)
 80005c8:	7cfb      	ldrb	r3, [r7, #19]
 80005ca:	3302      	adds	r3, #2
 80005cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // 3. Enable the EXTI interrupt delivery using IMR
        EXTI->EXTI_IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005d0:	4b56      	ldr	r3, [pc, #344]	; (800072c <GPIO_Init+0x2d0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a52      	ldr	r2, [pc, #328]	; (800072c <GPIO_Init+0x2d0>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6013      	str	r3, [r2, #0]
    }

    temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

    // 2. Configure the speed
    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	799b      	ldrb	r3, [r3, #6]
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	4619      	mov	r1, r3
 8000608:	2303      	movs	r3, #3
 800060a:	408b      	lsls	r3, r1
 800060c:	43db      	mvns	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	400a      	ands	r2, r1
 8000616:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6899      	ldr	r1, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	430a      	orrs	r2, r1
 8000626:	609a      	str	r2, [r3, #8]

    temp = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

    // 3. Configure the PullUp/PullDown settings
    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	79db      	ldrb	r3, [r3, #7]
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68da      	ldr	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	4619      	mov	r1, r3
 800064a:	2303      	movs	r3, #3
 800064c:	408b      	lsls	r3, r1
 800064e:	43db      	mvns	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68d9      	ldr	r1, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	430a      	orrs	r2, r1
 8000668:	60da      	str	r2, [r3, #12]

    temp = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

    // 4. Configure the Output Type
    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2301      	movs	r3, #1
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6859      	ldr	r1, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]

    temp = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

    // 5. Configure the Alternate Functionality
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d131      	bne.n	800071a <GPIO_Init+0x2be>
    {
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	7c3a      	ldrb	r2, [r7, #16]
 80006ce:	3208      	adds	r2, #8
 80006d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	220f      	movs	r2, #15
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	7c3a      	ldrb	r2, [r7, #16]
 80006e8:	4001      	ands	r1, r0
 80006ea:	3208      	adds	r2, #8
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	7c3a      	ldrb	r2, [r7, #16]
 80006f6:	3208      	adds	r2, #8
 80006f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7a5b      	ldrb	r3, [r3, #9]
 8000700:	461a      	mov	r2, r3
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c3a      	ldrb	r2, [r7, #16]
 8000712:	4301      	orrs	r1, r0
 8000714:	3208      	adds	r2, #8
 8000716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    temp = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
}
 800071e:	bf00      	nop
 8000720:	371c      	adds	r7, #28
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40010400 	.word	0x40010400
 8000730:	48000400 	.word	0x48000400
 8000734:	48000800 	.word	0x48000800
 8000738:	48000c00 	.word	0x48000c00
 800073c:	48001400 	.word	0x48001400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000

08000748 <GPIO_ToggleOutputPin>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= ( 1 << PinNumber );
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	78fa      	ldrb	r2, [r7, #3]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	405a      	eors	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	615a      	str	r2, [r3, #20]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <GPIO_IRQInterruptConfig>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE)
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d133      	bne.n	80007f2 <GPIO_IRQInterruptConfig+0x7e>
    {
        if (IRQNumber <= 31)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b1f      	cmp	r3, #31
 800078e:	d80a      	bhi.n	80007a6 <GPIO_IRQInterruptConfig+0x32>
        {
            // Program ISER0 register
            *NVIC_ISER0 |= ( 1 << IRQNumber );
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <GPIO_IRQInterruptConfig+0xf4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a32      	ldr	r2, [pc, #200]	; (8000868 <GPIO_IRQInterruptConfig+0xf4>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6013      	str	r3, [r2, #0]
        {
            // Program ICER2 register
            *NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
        }
    } 
}
 80007a4:	e059      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 31  && IRQNumber < 64)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d90f      	bls.n	80007cc <GPIO_IRQInterruptConfig+0x58>
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b3f      	cmp	r3, #63	; 0x3f
 80007b0:	d80c      	bhi.n	80007cc <GPIO_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <GPIO_IRQInterruptConfig+0xf8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	f002 021f 	and.w	r2, r2, #31
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a29      	ldr	r2, [pc, #164]	; (800086c <GPIO_IRQInterruptConfig+0xf8>)
 80007c6:	430b      	orrs	r3, r1
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e046      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
        }else if (IRQNumber >= 64  && IRQNumber < 96)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b3f      	cmp	r3, #63	; 0x3f
 80007d0:	d943      	bls.n	800085a <GPIO_IRQInterruptConfig+0xe6>
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b5f      	cmp	r3, #95	; 0x5f
 80007d6:	d840      	bhi.n	800085a <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <GPIO_IRQInterruptConfig+0xfc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <GPIO_IRQInterruptConfig+0xfc>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	e033      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
        if (IRQNumber <= 31)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b1f      	cmp	r3, #31
 80007f6:	d80a      	bhi.n	800080e <GPIO_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= ( 1 << IRQNumber );
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <GPIO_IRQInterruptConfig+0x100>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	4611      	mov	r1, r2
 8000806:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <GPIO_IRQInterruptConfig+0x100>)
 8000808:	430b      	orrs	r3, r1
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	e025      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
        } else if (IRQNumber > 31  && IRQNumber < 64)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b1f      	cmp	r3, #31
 8000812:	d90f      	bls.n	8000834 <GPIO_IRQInterruptConfig+0xc0>
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b3f      	cmp	r3, #63	; 0x3f
 8000818:	d80c      	bhi.n	8000834 <GPIO_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <GPIO_IRQInterruptConfig+0x104>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	f002 021f 	and.w	r2, r2, #31
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	4611      	mov	r1, r2
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <GPIO_IRQInterruptConfig+0x104>)
 800082e:	430b      	orrs	r3, r1
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	e012      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
        }else if (IRQNumber >= 64  && IRQNumber < 96)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b3f      	cmp	r3, #63	; 0x3f
 8000838:	d90f      	bls.n	800085a <GPIO_IRQInterruptConfig+0xe6>
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b5f      	cmp	r3, #95	; 0x5f
 800083e:	d80c      	bhi.n	800085a <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <GPIO_IRQInterruptConfig+0x108>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <GPIO_IRQInterruptConfig+0x108>)
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	e7ff      	b.n	800085a <GPIO_IRQInterruptConfig+0xe6>
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000e104 	.word	0xe000e104
 8000870:	e000e108 	.word	0xe000e108
 8000874:	e000e180 	.word	0xe000e180
 8000878:	e000e184 	.word	0xe000e184
 800087c:	e000e188 	.word	0xe000e188

08000880 <GPIO_IRQPriorityConfig>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
    // 1. Figure out the IPR register
    uint8_t iprx           = IRQNumber / 4;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section   = IRQNumber % 4;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	73bb      	strb	r3, [r7, #14]

    uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED);
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	3304      	adds	r3, #4
 80008a6:	737b      	strb	r3, [r7, #13]
    *( NVIC_PS_BASEADDR + (iprx * 4) ) |= ( IRQPriority << shift_amount );
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008b0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	79b9      	ldrb	r1, [r7, #6]
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008c8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <GPIO_IRQHandling>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI pr register corresponding to the pin number
    if ( EXTI->EXTI_PR1 & ( 1 << PinNumber ) )
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <GPIO_IRQHandling+0x3c>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d009      	beq.n	800090c <GPIO_IRQHandling+0x30>
    {
        // Clear the PR
        EXTI->EXTI_PR1 |= ( 1 << PinNumber );
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <GPIO_IRQHandling+0x3c>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <GPIO_IRQHandling+0x3c>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6153      	str	r3, [r2, #20]
    }  
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40010400 	.word	0x40010400

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	4d0d      	ldr	r5, [pc, #52]	; (8000954 <__libc_init_array+0x38>)
 8000920:	4c0d      	ldr	r4, [pc, #52]	; (8000958 <__libc_init_array+0x3c>)
 8000922:	1b64      	subs	r4, r4, r5
 8000924:	10a4      	asrs	r4, r4, #2
 8000926:	2600      	movs	r6, #0
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	4d0b      	ldr	r5, [pc, #44]	; (800095c <__libc_init_array+0x40>)
 800092e:	4c0c      	ldr	r4, [pc, #48]	; (8000960 <__libc_init_array+0x44>)
 8000930:	f000 f818 	bl	8000964 <_init>
 8000934:	1b64      	subs	r4, r4, r5
 8000936:	10a4      	asrs	r4, r4, #2
 8000938:	2600      	movs	r6, #0
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f855 3b04 	ldr.w	r3, [r5], #4
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	f855 3b04 	ldr.w	r3, [r5], #4
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	0800097c 	.word	0x0800097c
 8000958:	0800097c 	.word	0x0800097c
 800095c:	0800097c 	.word	0x0800097c
 8000960:	08000980 	.word	0x08000980

08000964 <_init>:
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	bf00      	nop
 8000968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096a:	bc08      	pop	{r3}
 800096c:	469e      	mov	lr, r3
 800096e:	4770      	bx	lr

08000970 <_fini>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr
